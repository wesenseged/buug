/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedTaskImport } from './routes/_authenticated/task'
import { Route as AuthenticatedSupportImport } from './routes/_authenticated/support'
import { Route as AuthenticatedSettingImport } from './routes/_authenticated/setting'
import { Route as AuthenticatedProjectImport } from './routes/_authenticated/project'
import { Route as AuthenticatedProgressImport } from './routes/_authenticated/progress'
import { Route as AuthenticatedNoteImport } from './routes/_authenticated/note'
import { Route as AuthenticatedLogoutImport } from './routes/_authenticated/logout'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedTaskRoute = AuthenticatedTaskImport.update({
  id: '/task',
  path: '/task',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSupportRoute = AuthenticatedSupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSettingRoute = AuthenticatedSettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedProjectRoute = AuthenticatedProjectImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedProgressRoute = AuthenticatedProgressImport.update({
  id: '/progress',
  path: '/progress',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedNoteRoute = AuthenticatedNoteImport.update({
  id: '/note',
  path: '/note',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedLogoutRoute = AuthenticatedLogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/logout': {
      id: '/_authenticated/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthenticatedLogoutImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/note': {
      id: '/_authenticated/note'
      path: '/note'
      fullPath: '/note'
      preLoaderRoute: typeof AuthenticatedNoteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/progress': {
      id: '/_authenticated/progress'
      path: '/progress'
      fullPath: '/progress'
      preLoaderRoute: typeof AuthenticatedProgressImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/project': {
      id: '/_authenticated/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof AuthenticatedProjectImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/setting': {
      id: '/_authenticated/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof AuthenticatedSettingImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/support': {
      id: '/_authenticated/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof AuthenticatedSupportImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/task': {
      id: '/_authenticated/task'
      path: '/task'
      fullPath: '/task'
      preLoaderRoute: typeof AuthenticatedTaskImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedLogoutRoute: typeof AuthenticatedLogoutRoute
  AuthenticatedNoteRoute: typeof AuthenticatedNoteRoute
  AuthenticatedProgressRoute: typeof AuthenticatedProgressRoute
  AuthenticatedProjectRoute: typeof AuthenticatedProjectRoute
  AuthenticatedSettingRoute: typeof AuthenticatedSettingRoute
  AuthenticatedSupportRoute: typeof AuthenticatedSupportRoute
  AuthenticatedTaskRoute: typeof AuthenticatedTaskRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedLogoutRoute: AuthenticatedLogoutRoute,
  AuthenticatedNoteRoute: AuthenticatedNoteRoute,
  AuthenticatedProgressRoute: AuthenticatedProgressRoute,
  AuthenticatedProjectRoute: AuthenticatedProjectRoute,
  AuthenticatedSettingRoute: AuthenticatedSettingRoute,
  AuthenticatedSupportRoute: AuthenticatedSupportRoute,
  AuthenticatedTaskRoute: AuthenticatedTaskRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/signin': typeof SigninRoute
  '/logout': typeof AuthenticatedLogoutRoute
  '/note': typeof AuthenticatedNoteRoute
  '/progress': typeof AuthenticatedProgressRoute
  '/project': typeof AuthenticatedProjectRoute
  '/setting': typeof AuthenticatedSettingRoute
  '/support': typeof AuthenticatedSupportRoute
  '/task': typeof AuthenticatedTaskRoute
  '/': typeof AuthenticatedIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signin': typeof SigninRoute
  '/logout': typeof AuthenticatedLogoutRoute
  '/note': typeof AuthenticatedNoteRoute
  '/progress': typeof AuthenticatedProgressRoute
  '/project': typeof AuthenticatedProjectRoute
  '/setting': typeof AuthenticatedSettingRoute
  '/support': typeof AuthenticatedSupportRoute
  '/task': typeof AuthenticatedTaskRoute
  '/': typeof AuthenticatedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/signin': typeof SigninRoute
  '/_authenticated/logout': typeof AuthenticatedLogoutRoute
  '/_authenticated/note': typeof AuthenticatedNoteRoute
  '/_authenticated/progress': typeof AuthenticatedProgressRoute
  '/_authenticated/project': typeof AuthenticatedProjectRoute
  '/_authenticated/setting': typeof AuthenticatedSettingRoute
  '/_authenticated/support': typeof AuthenticatedSupportRoute
  '/_authenticated/task': typeof AuthenticatedTaskRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signin'
    | '/logout'
    | '/note'
    | '/progress'
    | '/project'
    | '/setting'
    | '/support'
    | '/task'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/signin'
    | '/logout'
    | '/note'
    | '/progress'
    | '/project'
    | '/setting'
    | '/support'
    | '/task'
    | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/login'
    | '/signin'
    | '/_authenticated/logout'
    | '/_authenticated/note'
    | '/_authenticated/progress'
    | '/_authenticated/project'
    | '/_authenticated/setting'
    | '/_authenticated/support'
    | '/_authenticated/task'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/login",
        "/signin"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/logout",
        "/_authenticated/note",
        "/_authenticated/progress",
        "/_authenticated/project",
        "/_authenticated/setting",
        "/_authenticated/support",
        "/_authenticated/task",
        "/_authenticated/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/_authenticated/logout": {
      "filePath": "_authenticated/logout.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/note": {
      "filePath": "_authenticated/note.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/progress": {
      "filePath": "_authenticated/progress.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/project": {
      "filePath": "_authenticated/project.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/setting": {
      "filePath": "_authenticated/setting.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/support": {
      "filePath": "_authenticated/support.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/task": {
      "filePath": "_authenticated/task.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
